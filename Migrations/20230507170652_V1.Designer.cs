// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace UposliMe.Migrations
{
    [DbContext(typeof(UposliMeContext))]
    [Migration("20230507170652_V1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Administrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Administratori");
                });

            modelBuilder.Entity("Models.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Komentar")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Ocena")
                        .HasColumnType("float");

                    b.Property<int?>("PoslodavacID")
                        .HasColumnType("int");

                    b.Property<int?>("ZadrugaID")
                        .HasColumnType("int");

                    b.Property<int?>("ZadrugarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PoslodavacID");

                    b.HasIndex("ZadrugaID");

                    b.HasIndex("ZadrugarID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Models.Notifikacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poruka")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Notifikacije");
                });

            modelBuilder.Entity("Models.NotifikacijaAdministrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AdministratorID")
                        .HasColumnType("int");

                    b.Property<int?>("NotifikacijaID")
                        .HasColumnType("int");

                    b.Property<bool>("Procitana")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AdministratorID");

                    b.HasIndex("NotifikacijaID");

                    b.ToTable("NotifikacijeAdministratori");
                });

            modelBuilder.Entity("Models.NotifikacijaPoslodavac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("NotifikacijaID")
                        .HasColumnType("int");

                    b.Property<int?>("PoslodavacID")
                        .HasColumnType("int");

                    b.Property<bool>("Procitana")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("NotifikacijaID");

                    b.HasIndex("PoslodavacID");

                    b.ToTable("NotifikacijePoslodavci");
                });

            modelBuilder.Entity("Models.NotifikacijaZadruga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("NotifikacijaID")
                        .HasColumnType("int");

                    b.Property<bool>("Procitana")
                        .HasColumnType("bit");

                    b.Property<int?>("ZadrugaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NotifikacijaID");

                    b.HasIndex("ZadrugaID");

                    b.ToTable("NotifikacijeZadruge");
                });

            modelBuilder.Entity("Models.NotifikacijaZadrugar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("NotifikacijaID")
                        .HasColumnType("int");

                    b.Property<bool>("Procitana")
                        .HasColumnType("bit");

                    b.Property<int?>("ZadrugarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NotifikacijaID");

                    b.HasIndex("ZadrugarID");

                    b.ToTable("NotifikacijeZadrugari");
                });

            modelBuilder.Entity("Models.Oglas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Aktuelan")
                        .HasColumnType("bit");

                    b.Property<int>("BrojPotrebnihRadnika")
                        .HasColumnType("int");

                    b.Property<string>("BrojStana")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("BrojUlaza")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DatumIzvrsavanjaPosla")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPostavljanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NacinPlacanja")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NapravljenUgovor")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Novac")
                        .HasColumnType("float");

                    b.Property<bool>("OdabraniRadnici")
                        .HasColumnType("bit");

                    b.Property<bool>("Odobren")
                        .HasColumnType("bit");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoslodavacID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RokZaPrijavu")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ZadrugaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PoslodavacID");

                    b.HasIndex("ZadrugaID");

                    b.ToTable("Oglasi");
                });

            modelBuilder.Entity("Models.OglasZadrugar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("OglasID")
                        .HasColumnType("int");

                    b.Property<int?>("ZadrugarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OglasID");

                    b.HasIndex("ZadrugarID");

                    b.ToTable("OglasiZadrugari");
                });

            modelBuilder.Entity("Models.Poslodavac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrojStana")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("BrojUlaza")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Delatnost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FiksniTelefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Informacije")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaticniBroj")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("MobilniTelefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PIB")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Slika")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Poslodavci");
                });

            modelBuilder.Entity("Models.Ugovor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DatumFormiranja")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OglasID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoslodavacID")
                        .HasColumnType("int");

                    b.Property<int?>("ZadrugaID")
                        .HasColumnType("int");

                    b.Property<int?>("ZadrugarID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OglasID");

                    b.HasIndex("PoslodavacID");

                    b.HasIndex("ZadrugaID");

                    b.HasIndex("ZadrugarID");

                    b.ToTable("Ugovori");
                });

            modelBuilder.Entity("Models.Zadruga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrojRacuna")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BrojStana")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("BrojUlaza")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FiksniTelefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Informacije")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaticniBroj")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("MobilniTelefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PIB")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Slika")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Zadruge");
                });

            modelBuilder.Entity("Models.Zadrugar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrojRacuna")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BrojStana")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("BrojUlaza")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fakultet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Indeks")
                        .HasColumnType("int");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LBO")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Slika")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SrednjaSkola")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Zadrugari");
                });

            modelBuilder.Entity("Models.Feedback", b =>
                {
                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PoslodavacID");

                    b.HasOne("Models.Zadruga", "Zadruga")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ZadrugaID");

                    b.HasOne("Models.Zadrugar", "Zadrugar")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ZadrugarID");

                    b.Navigation("Poslodavac");

                    b.Navigation("Zadruga");

                    b.Navigation("Zadrugar");
                });

            modelBuilder.Entity("Models.NotifikacijaAdministrator", b =>
                {
                    b.HasOne("Models.Administrator", "Administrator")
                        .WithMany("NotifikacijeAdministratori")
                        .HasForeignKey("AdministratorID");

                    b.HasOne("Models.Notifikacija", "Notifikacija")
                        .WithMany("NotifikacijeAdministratori")
                        .HasForeignKey("NotifikacijaID");

                    b.Navigation("Administrator");

                    b.Navigation("Notifikacija");
                });

            modelBuilder.Entity("Models.NotifikacijaPoslodavac", b =>
                {
                    b.HasOne("Models.Notifikacija", "Notifikacija")
                        .WithMany("NotifikacijePoslodavci")
                        .HasForeignKey("NotifikacijaID");

                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("NotifikacijePoslodavci")
                        .HasForeignKey("PoslodavacID");

                    b.Navigation("Notifikacija");

                    b.Navigation("Poslodavac");
                });

            modelBuilder.Entity("Models.NotifikacijaZadruga", b =>
                {
                    b.HasOne("Models.Notifikacija", "Notifikacija")
                        .WithMany("NotifikacijeZadruge")
                        .HasForeignKey("NotifikacijaID");

                    b.HasOne("Models.Zadruga", "Zadruga")
                        .WithMany("NotifikacijeZadruge")
                        .HasForeignKey("ZadrugaID");

                    b.Navigation("Notifikacija");

                    b.Navigation("Zadruga");
                });

            modelBuilder.Entity("Models.NotifikacijaZadrugar", b =>
                {
                    b.HasOne("Models.Notifikacija", "Notifikacija")
                        .WithMany("NotifikacijeZadrugari")
                        .HasForeignKey("NotifikacijaID");

                    b.HasOne("Models.Zadrugar", "Zadrugar")
                        .WithMany("NotifikacijeZadrugari")
                        .HasForeignKey("ZadrugarID");

                    b.Navigation("Notifikacija");

                    b.Navigation("Zadrugar");
                });

            modelBuilder.Entity("Models.Oglas", b =>
                {
                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("Oglasi")
                        .HasForeignKey("PoslodavacID");

                    b.HasOne("Models.Zadruga", "Zadruga")
                        .WithMany("Oglasi")
                        .HasForeignKey("ZadrugaID");

                    b.Navigation("Poslodavac");

                    b.Navigation("Zadruga");
                });

            modelBuilder.Entity("Models.OglasZadrugar", b =>
                {
                    b.HasOne("Models.Oglas", "Oglas")
                        .WithMany("OglasiZadrugari")
                        .HasForeignKey("OglasID");

                    b.HasOne("Models.Zadrugar", "Zadrugar")
                        .WithMany("OglasiZadrugari")
                        .HasForeignKey("ZadrugarID");

                    b.Navigation("Oglas");

                    b.Navigation("Zadrugar");
                });

            modelBuilder.Entity("Models.Ugovor", b =>
                {
                    b.HasOne("Models.Oglas", "Oglas")
                        .WithMany()
                        .HasForeignKey("OglasID");

                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("Ugovori")
                        .HasForeignKey("PoslodavacID");

                    b.HasOne("Models.Zadruga", "Zadruga")
                        .WithMany("Ugovori")
                        .HasForeignKey("ZadrugaID");

                    b.HasOne("Models.Zadrugar", "Zadrugar")
                        .WithMany("Ugovori")
                        .HasForeignKey("ZadrugarID");

                    b.Navigation("Oglas");

                    b.Navigation("Poslodavac");

                    b.Navigation("Zadruga");

                    b.Navigation("Zadrugar");
                });

            modelBuilder.Entity("Models.Administrator", b =>
                {
                    b.Navigation("NotifikacijeAdministratori");
                });

            modelBuilder.Entity("Models.Notifikacija", b =>
                {
                    b.Navigation("NotifikacijeAdministratori");

                    b.Navigation("NotifikacijePoslodavci");

                    b.Navigation("NotifikacijeZadrugari");

                    b.Navigation("NotifikacijeZadruge");
                });

            modelBuilder.Entity("Models.Oglas", b =>
                {
                    b.Navigation("OglasiZadrugari");
                });

            modelBuilder.Entity("Models.Poslodavac", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("NotifikacijePoslodavci");

                    b.Navigation("Oglasi");

                    b.Navigation("Ugovori");
                });

            modelBuilder.Entity("Models.Zadruga", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("NotifikacijeZadruge");

                    b.Navigation("Oglasi");

                    b.Navigation("Ugovori");
                });

            modelBuilder.Entity("Models.Zadrugar", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("NotifikacijeZadrugari");

                    b.Navigation("OglasiZadrugari");

                    b.Navigation("Ugovori");
                });
#pragma warning restore 612, 618
        }
    }
}
